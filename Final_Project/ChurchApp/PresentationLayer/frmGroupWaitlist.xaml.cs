using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using DataObjects;
using LogicLayer;

namespace PresentationLayer
{
    /// <summary>
    /// Interaction logic for frmGroupWaitlist.xaml
    /// </summary>
    public partial class frmGroupWaitlist : Window
    {
        // This class contains the means by which a group leader can either approve or deny a user who is on a group waitlist.

        IGroupManager _groupManager;
        IActivityManager _activityManager;
        string _groupID;
        DataGrid _dgGroupMembers;
        IUserManager _userManager;

        // This is the constructor for this class
        public frmGroupWaitlist(string groupID, IGroupManager groupManager, IActivityManager activityManager, DataGrid dgGroupMembers, IUserManager userManager)
        {
            InitializeComponent();
            _groupManager = groupManager;
            _activityManager = activityManager;
            _groupID = groupID;
            _dgGroupMembers = dgGroupMembers;
            _userManager = userManager;

            dgGroupWaitlist.ItemsSource = _userManager.RetrieveUnapprovedUsersByGroupID(_groupID);
        }


        // This event handler is fired when the columns for the dgGroupWaitlist data grid are automagically generated. This formats the
        // data grid in such a way that it will be more human readable.
        private void DgGroupWaitlist_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgGroupWaitlist.Columns.RemoveAt(13);
            dgGroupWaitlist.Columns.RemoveAt(12);
            dgGroupWaitlist.Columns.RemoveAt(11);
            dgGroupWaitlist.Columns.RemoveAt(10);
            dgGroupWaitlist.Columns.RemoveAt(9);
            dgGroupWaitlist.Columns.RemoveAt(8);
            dgGroupWaitlist.Columns.RemoveAt(7);
            dgGroupWaitlist.Columns.RemoveAt(6);
            dgGroupWaitlist.Columns.RemoveAt(5);
            dgGroupWaitlist.Columns.RemoveAt(4);
            dgGroupWaitlist.Columns.RemoveAt(3);
            dgGroupWaitlist.Columns.RemoveAt(0);

            dgGroupWaitlist.Columns[0].Header = "First Name";
            dgGroupWaitlist.Columns[1].Header = "Last Name";
        }

        // This event handler is fired when the back button is clicked. It closes this form.
        private void BtnBack_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
            _dgGroupMembers.ItemsSource = _userManager.RetrieveUsersByGroupID(_groupID);
        }


        // This event handler is fired when the approve button is clicked. It takes a user who is on a waitlist for a group and approves them for membership.
        private void BtnApprove_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_groupManager.EditPersonGroupAsApproved(((User)dgGroupWaitlist.SelectedItem).PersonID, _groupID))
                {
                    MessageBox.Show(((User)dgGroupWaitlist.SelectedItem).FirstName + " " + ((User)dgGroupWaitlist.SelectedItem).LastName + " added to " + _groupID + " group.");
                    dgGroupWaitlist.ItemsSource = _userManager.RetrieveUnapprovedUsersByGroupID(_groupID);
                }
            }
            catch (Exception)
            {

                MessageBox.Show("You must select a user first");
            }
        }

        // This event handler is fired when the deny button is clicked. It denies a user for membership into a group.
        private void BtnDeny_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_userManager.DeleteUserGroup(((User)dgGroupWaitlist.SelectedItem).PersonID, _groupID))
                {
                    MessageBox.Show(((User)dgGroupWaitlist.SelectedItem).FirstName + " " + ((User)dgGroupWaitlist.SelectedItem).LastName + " denied membership to " + _groupID + " group.");
                    dgGroupWaitlist.ItemsSource = _userManager.RetrieveUnapprovedUsersByGroupID(_groupID);
                }
            }
            catch (Exception)
            {

                MessageBox.Show("You must select a user first");
            }
        }
    }
}
