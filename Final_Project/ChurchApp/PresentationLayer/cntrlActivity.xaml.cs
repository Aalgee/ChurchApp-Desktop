using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using DataObjects;
using LogicLayer;

namespace PresentationLayer
{
    /// <summary>
    /// Interaction logic for cntrlActivity.xaml
    /// </summary>
    public partial class cntrlActivity : UserControl
    {
        IUserManager _userManager;
        IActivityManager _activityManager;
        IScheduleManager _scheduleManager;
        IGroupManager _groupManager;

        User _user;
        ActivityVM _activity;

        
        bool _addMode = false;

        // This constructor is used when the various managers are passed directly into the class.
        public cntrlActivity(IActivityManager activityManager, User user ,IUserManager userManager)
        {

            _user = user;
            _activityManager = activityManager;
            _userManager = userManager;
            InitializeComponent();
            populateActivityList();
            populateUserActivityList();

            checkUserRole(); 
        }

        // This is the standard constructor. It creates ne manager objects and assigns them to the various
        // manager attributes of this class
        public cntrlActivity(User user)
        {
            _user = user;
            _activityManager = new ActivityManager();
            _userManager = new UserManager();
            _scheduleManager = new ScheduleManager();
            _groupManager = new GroupManager();
            InitializeComponent();
            populateActivityList();
            populateUserActivityList();
            showAddNewButton();

        }

        // This method checks to see if the user has the right role assigned to them, and if they do it makes the add new button visible.
        private void showAddNewButton()
        {
            if (checkUserRole())
            {
                btnAddNew.Visibility = Visibility.Visible;
            }
        }

        // This method checks to see if the user has the right role assigned to them, and if they do it makes the edit button visible.
        private void showEditButton()
        {
            if (checkUserRole())
            {
                btnEdit.Visibility = Visibility.Visible;
            }
        }

        // This method checks to make sure the user has the right role assigned to them. If they do it returns a bool value of true.
        private bool checkUserRole()
        {
            bool isAbleToEdit = false;
            var roles = _userManager.RetrievePersonRoles(_user.PersonID);
            foreach (var r in roles)
            {
                if (r == "Pastor" || r == "Administrator" || r == "Manager")
                {
                    return isAbleToEdit = true;
                }
            }
            return isAbleToEdit;
        }

        // This helper method simply populates the dgActivityList with the appropriate data.
        private void populateActivityList()
        {
            try
            {
                dgActivityList.ItemsSource = _activityManager?.RetrieveActivitiesByActivitySchedule();
            }
            catch (Exception) { }
        }

        // This helper method simply populates the dgUserActivityList with the appropriate data.
        private void populateUserActivityList()
        {
            //try
            //{
                dgUserActivityList.ItemsSource = _activityManager?.RetrieveActivitiesByPersonID(_user.PersonID);
            //}
            //catch (Exception) { }
        }

        // When the columns for the dgActivitList are auto generated this event handler fires. This formats the information
        // supplied to the dgActivityList in a more human readable way.
        private void DgActivityList_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgActivityList.Columns.Remove(dgActivityList.Columns[14]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[12]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[11]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[10]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[9]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[8]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[7]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[6]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[5]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[4]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[3]);
            dgActivityList.Columns.Remove(dgActivityList.Columns[0]);

            dgActivityList.Columns[0].Header = "Activity Name";
            dgActivityList.Columns[1].Header = "Activity Type";
            dgActivityList.Columns[2].Header = "Start Time";
        }

        // This helper method fills the text boxes with the information that is loaded into the _activity atribute of this class.
        private void fillTextBoxes()
        {
            populatePeopleAttendingList();

            cmbActivityType.SelectedItem = _activity.ActivityTypeID;
            cmbActivityType.ItemsSource = _activityManager.RetrieveAllActivityTypes();
            
            
            txtAddress1.Text = _activity.Address1;
            txtAddress2.Text = _activity.Address2;
            txtCity.Text = _activity.City;
            txtEnd.Text = _activity.End.ToShortDateString() + " " + _activity.End.ToShortTimeString();
            txtActivityName.Text = _activity.ActivityName;
            txtLocation.Text = _activity.LocationName;
            txtStart.Text = _activity.Start.ToShortDateString() + " " + _activity.Start.ToShortTimeString();
            txtState.Text = _activity.State;
            txtZip.Text = _activity.Zip;
            txtDescription.Text = _activity.Description;
        }

        // When the columns for the dgUserActivitList are auto generated this event handler fires. This formats the information
        // supplied to the dgUserActivityList in a more human readable way.
        private void DgUserActivityList_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[14]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[12]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[11]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[10]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[9]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[8]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[7]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[6]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[5]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[4]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[3]);
            dgUserActivityList.Columns.Remove(dgUserActivityList.Columns[0]);

            dgUserActivityList.Columns[0].Header = "Activity Name";
            dgUserActivityList.Columns[1].Header = "Activity Type";
            dgUserActivityList.Columns[2].Header = "Start Time";
        }

        // When the selection in the dgActivityList data grid is changed this event handler is fired off. This method then assigns the
        // selected item to the _activity attribute and uses it to populate the text fields.
        private void DgActivityList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _activity = (ActivityVM)dgActivityList.SelectedItem;
            lbGroupsParticipating.ItemsSource = _groupManager.RetrieveGroupsByActivityID(_activity.ActivityID);
            //populateUserActivityList();

            fillTextBoxes();
            showEditButton();
            disableFields();

            btnSave.Visibility = Visibility.Hidden;
            //btnCancel.Visibility = Visibility.Hidden;
            //btnSignUp.Visibility = Visibility.Visible;
        }

        // This helper method is used to disablew the text boxes on this user control.
        private void disableFields()
        {
            txtActivityName.IsReadOnly = true;
            txtAddress1.IsReadOnly = true;
            txtAddress2.IsReadOnly = true;
            txtCity.IsReadOnly = true;
            txtDescription.IsReadOnly = true;
            txtEnd.IsReadOnly = true;
            txtLocation.IsReadOnly = true;
            txtStart.IsReadOnly = true;
            txtState.IsReadOnly = true;
            txtZip.IsReadOnly = true;
            cmbActivityType.IsEnabled = false;
        }

        // When the selection in the dgUserActivityList data grid is changed this event handler is fired off. This method then assigns the
        // selected item to the _activity attribute and uses it to populate the text fields.
        private void DgUserActivityList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            _activity = (ActivityVM)dgUserActivityList.SelectedItem;
            lbGroupsParticipating.ItemsSource = _groupManager.RetrieveGroupsByActivityID(_activity.ActivityID);

            fillTextBoxes();
            showEditButton();
            disableFields();

            btnSave.Visibility = Visibility.Hidden;
            //btnCancel.Visibility = Visibility.Visible;
            //btnSignUp.Visibility = Visibility.Hidden;
        }

        // this populates the dgPeopleAttending data grid with the people that are attending a particular activity.
        private void populatePeopleAttendingList()
        {
            try
            {
                dgPeopleAttending.ItemsSource = _userManager?.SelectUsersByActivityID(_activity.ActivityID);
            }
            catch (Exception)
            {

                
            }
                
            
        }

        // This event handler is fired off when the cancel button is clicked. it cancels an activity that a person is set to attend.
        private void BtnCancel_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if(dgUserActivityList.SelectedItems.Count == 0)
                {
                    MessageBox.Show("You must make a selection \nfrom My Upcoming Activities.");
                    return;
                }
                if (_addMode)
                {
                    return;
                }
                if (MessageBox.Show("Are you sure?", "Cancel Activity", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.No)
                {
                    //chkActive.IsChecked = !(bool)chkActive.IsChecked;
                    return;
                }
                try
                {
                    ActivityVM activity = (ActivityVM)dgUserActivityList.SelectedItem;
                    if(_activityManager.DeletePersonActivity(_user.PersonID, activity.ActivityID))
                    {
                        populatePeopleAttendingList();
                        populateUserActivityList();
                        
                    }
                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message + "\n\n" + ex.InnerException.Message);
                }


            }
            catch (Exception ex)
            {
                //MessageBox.Show("BAD");
            }
}

        // This event handler is fired when the sign up button is clicked. It signs the user up for an activity which indicates that they intend
        // to attend it.
        private void BtnSignUp_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (dgActivityList.SelectedItems.Count == 0)
                {
                    MessageBox.Show("You must make a selection\nfrom List of Upcoming Activities.");
                    return;
                }
                if (_addMode)
                {
                    return;
                }
                ActivityVM activity = (ActivityVM)dgActivityList.SelectedItem;
                var activities = _activityManager.RetrieveActivitiesByPersonID(_user.PersonID);

                foreach (var a in activities)
                {
                    if(a.ActivityID == activity.ActivityID)
                    {
                        MessageBox.Show("You are already signed up for that activity.");
                        return;
                    }
                }
                if (MessageBox.Show("Are you sure?", "Sign up Activity", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.No)
                {
                    //chkActive.IsChecked = !(bool)chkActive.IsChecked;
                    return;
                }
                try
                {
                    activity = (ActivityVM)dgActivityList.SelectedItem;
                    if (_activityManager.AddPersonActivity(_user.PersonID, activity.ActivityID))
                    {
                        populatePeopleAttendingList();
                        populateUserActivityList();
                        
                    }
                    //populateUserActivityList();
                }
                catch (Exception ex)
                {

                    MessageBox.Show(ex.Message + "\n\n" + ex.InnerException.Message);
                }


            }
            catch (Exception ex)
            {
                //MessageBox.Show("BAD");
            }
        }

        // When the columns for the dgPeopleAttending data grid are auto generated this event handler fires. This formats the information
        // supplied to the dgPeopleAttending data grid in a more human readable way.
        private void DgPeopleAttending_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[13]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[12]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[11]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[10]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[9]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[8]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[7]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[6]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[5]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[4]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[3]);
            dgPeopleAttending.Columns.Remove(dgPeopleAttending.Columns[0]);

            dgPeopleAttending.Columns[0].Header = "First Name";
            dgPeopleAttending.Columns[1].Header = "Last Name";



        }

        // This event is fired when the edit button is clicked. it enables the text boxes allowing the user to edit an activity.
        private void BtnEdit_Click(object sender, RoutedEventArgs e)
        {
            if (_activity != null)
            {
                cmbActivityType.ItemsSource = _activityManager.RetrieveAllActivityTypes();
                enableTextBoxes();

                btnEdit.Visibility = Visibility.Hidden;
                btnSave.Visibility = Visibility.Visible;
            }
        }

        // This helper method simply enable the textboxes for this user control.
        private void enableTextBoxes()
        {
            
            cmbActivityType.IsEnabled = true;


            txtAddress1.IsReadOnly = false;
            txtAddress2.IsReadOnly = false;
            txtCity.IsReadOnly = false;
            txtEnd.IsReadOnly = false;
            txtActivityName.IsReadOnly = false;
            txtLocation.IsReadOnly = false;
            txtStart.IsReadOnly = false;
            txtState.IsReadOnly = false;
            txtZip.IsReadOnly = false;
            txtDescription.IsReadOnly = false;
        }

        // This event handler fires when the save button is clicked. It gathers all the information from the text boxes and then, based upon if _addMode is true or false,
        // either updates an activity or creates a new one.
        private void BtnSave_Click(object sender, RoutedEventArgs e)
        {
            ActivityVM activityToSave = new ActivityVM();

            if(txtActivityName.Text == "")
            {
                MessageBox.Show("You must enter an activity name.");
                txtActivityName.Focus();
                return;
            }
            if (txtAddress1.Text == "")
            {
                MessageBox.Show("You must enter an address.");
                txtAddress1.Focus();
                return;
            }
            if (txtCity.Text == "")
            {
                MessageBox.Show("You must enter a city name.");
                txtCity.Focus();
                return;
            }
            if (txtDescription.Text == "")
            {
                MessageBox.Show("You must enter a description.");
                txtDescription.Focus();
                return;
            }

            if (txtEnd.Text == "")
            {
                MessageBox.Show("You must enter a date and time.");
                txtEnd.Focus();
                return;
            }

            try
            {
                DateTime end = DateTime.Parse(txtEnd.Text);
            }
            catch (Exception ex)
            {
                MessageBox.Show("You must enter valid date and time.");
                txtEnd.Focus();
                return;
            }

            
            if (txtLocation.Text == "")
            {
                MessageBox.Show("You must enter a location");
                txtLocation.Focus();
                return;
            }

            if (txtStart.Text == "")
            {
                MessageBox.Show("You must enter a date and time");
                txtStart.Focus();
                return;
            }

            try
            {
                DateTime start = DateTime.Parse(txtStart.Text);
            }
            catch (Exception)
            {
                MessageBox.Show("You must enter valid date and time.");
                txtEnd.Focus();
                return;
            }

            if (txtState.Text == "")
            {
                MessageBox.Show("You must enter a state");
                txtState.Focus();
                return;
            }
            if (txtZip.Text == "")
            {
                MessageBox.Show("You must enter a Zip code");
                txtZip.Focus();
                return;
            }
            if(cmbActivityType == null)
            {
                MessageBox.Show("You must choose a Activity Type");
                cmbActivityType.Focus();
                return;
            }

            try
            {
                ActivityVM newActivity = new ActivityVM()
                {

                    ActivityName = txtActivityName.Text,
                    ActivityTypeID = cmbActivityType.SelectedItem.ToString(),
                    LocationName = txtLocation.Text,
                    Address1 = txtAddress1.Text,
                    Address2 = txtAddress2.Text,
                    City = txtCity.Text,
                    State = txtState.Text,
                    Zip = txtZip.Text,
                    Description = txtDescription.Text,
                    End = DateTime.Parse(txtEnd.Text),
                    Start = DateTime.Parse(txtStart.Text),
                    

                };



                if(_addMode)
                {
                    int activityID = _activityManager.AddActivity(newActivity);

                    _activityManager.AddActivitySchedule(activityID, DateTime.Parse(txtStart.Text), DateTime.Parse(txtEnd.Text));

                    MessageBox.Show("Activity: " + newActivity.ActivityName + " created.");

                    _addMode = false;
                    
                    populateActivityList();

                    btnSave.Visibility = Visibility.Hidden;
                }

                else
                {
                    newActivity.ActivityID = _activity.ActivityID;

                    _activityManager.EditActivity(_activity, newActivity);

                    _scheduleManager.EditActivitySchedule(_activity, newActivity);
                    
                    populateUserActivityList();
                    populateActivityList();
                    btnSave.Visibility = Visibility.Hidden;
                    btnEdit.Visibility = Visibility.Visible;
                }

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }

        // This event is fired when the add new button is clicked. It enable and clears the text boxes allowing the user to create a new activity.
        private void BtnAddNew_Click(object sender, RoutedEventArgs e)
        {
            dgPeopleAttending.ItemsSource = null;
            lbGroupsParticipating.ItemsSource = null;
            cmbActivityType.ItemsSource = _activityManager.RetrieveAllActivityTypes();
            _addMode = true;
            btnEdit.Visibility = Visibility.Hidden;
            btnSave.Visibility = Visibility.Visible;
            enableTextBoxes();

            txtActivityName.Clear();
            txtAddress1.Clear();
            txtAddress2.Clear();
            txtCity.Clear();
            txtDescription.Clear();
            txtEnd.Clear();
            txtStart.Clear();
            txtState.Clear();
            txtZip.Clear();
            txtLocation.Clear();
            
        }
    }
}
